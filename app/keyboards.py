# app/keyboards.py
# ------------------------------------------------------------
# –û–±—â–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:
#   ‚Ä¢ Token / Accounts:  tokens_menu_kb, accounts_menu_kb, accounts_pick_kb, account_actions_kb
#   ‚Ä¢ Notifications:     notify_menu
#   ‚Ä¢ Schedule:          schedule_menu, dow_picker_kb
# ------------------------------------------------------------

from __future__ import annotations

from typing import Iterable, List
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


# =========================
#   TOKEN / ACCOUNTS
# =========================

def tokens_menu_kb() -> InlineKeyboardMarkup:
    """
    –ò–Ω–ª–∞–π–Ω-–º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ Token / Accounts.
      ‚Ä¢ Set token    ‚Üí tok_set
      ‚Ä¢ Check token  ‚Üí tok_check
      ‚Ä¢ Recheck all  ‚Üí tok_recheck_all
      ‚Ä¢ Accounts     ‚Üí accounts_menu
      ‚Ä¢ Back         ‚Üí back_main   ‚Üê –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–ø–æ –∑–∞–ø—Ä–æ—Å—É)
    """
    rows = [
        [InlineKeyboardButton(text="‚ûï Set token",   callback_data="tok_set")],
        [InlineKeyboardButton(text="üß™ Check token", callback_data="tok_check")],
        [InlineKeyboardButton(text="‚ôªÔ∏è Recheck all", callback_data="tok_recheck_all")],
        [InlineKeyboardButton(text="üë§ Accounts",    callback_data="accounts_menu")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è Back",        callback_data="back_main")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


def accounts_menu_kb() -> InlineKeyboardMarkup:
    """–ü–æ–¥–º–µ–Ω—é Accounts –≤–Ω—É—Ç—Ä–∏ —Ä–∞–∑–¥–µ–ª–∞ Token."""
    rows = [
        [InlineKeyboardButton(text="üìÉ List",   callback_data="accounts_list")],
        [InlineKeyboardButton(text="‚úèÔ∏è Rename", callback_data="acc_rename_menu")],
        [InlineKeyboardButton(text="üóë Delete",  callback_data="acc_delete_menu")],
        # –Ω–∞–∑–∞–¥ ‚Äî –≤ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ —Ç–æ–∫–µ–Ω–æ–≤
        [InlineKeyboardButton(text="‚¨ÖÔ∏è Back",   callback_data="token_menu")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


def accounts_pick_kb(accounts: Iterable) -> InlineKeyboardMarkup:
    """
    –ò–Ω–ª–∞–π–Ω-–≤—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞.
    –û–∂–∏–¥–∞–µ—Ç—Å—è iterable —Å –æ–±—ä–µ–∫—Ç–∞–º–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å .id –∏ .title.
    callback_data: 'acc_pick:<id>'
    """
    rows: List[List[InlineKeyboardButton]] = []
    for a in accounts:
        title = getattr(a, "title", None) or f"id={getattr(a, 'id', '?')}"
        rows.append([
            InlineKeyboardButton(text=title, callback_data=f"acc_pick:{getattr(a, 'id', 0)}")
        ])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è Back", callback_data="token_menu")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def account_actions_kb(acc_id: int) -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚≠ê Set default", callback_data=f"acc_setdef:{acc_id}")],
        [InlineKeyboardButton(text="‚úèÔ∏è Rename",     callback_data=f"acc_rename:{acc_id}")],
        [InlineKeyboardButton(text="üóë Delete",      callback_data=f"acc_delete:{acc_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è Back",       callback_data="token_menu")],
    ])


# =========================
#   NOTIFICATIONS
# =========================

def notify_menu() -> InlineKeyboardMarkup:
    """
    –ò–Ω–ª–∞–π–Ω-–º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.
      ‚Ä¢ Here   ‚Üí notify_here
      ‚Ä¢ Status ‚Üí notify_status
      ‚Ä¢ Test   ‚Üí notify_test
      ‚Ä¢ Off    ‚Üí notify_off
      ‚Ä¢ Back   ‚Üí token_menu
    """
    rows = [
        [InlineKeyboardButton(text="üìç Here",   callback_data="notify_here")],
        [InlineKeyboardButton(text="üìä Status", callback_data="notify_status")],
        [InlineKeyboardButton(text="üß™ Test",   callback_data="notify_test")],
        [InlineKeyboardButton(text="üîï Off",    callback_data="notify_off")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è Back",   callback_data="token_menu")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


# =========================
#   SCHEDULE
# =========================

def schedule_menu() -> InlineKeyboardMarkup:
    """
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ Schedule.
      ‚Ä¢ Add times     ‚Üí sched_add
      ‚Ä¢ List timers   ‚Üí sched_list
      ‚Ä¢ Remove by time‚Üí sched_remove
      ‚Ä¢ Clear all     ‚Üí sched_clear
      ‚Ä¢ Export CSV    ‚Üí sched_export
      ‚Ä¢ Import CSV    ‚Üí sched_import
      ‚Ä¢ Next 7 days   ‚Üí sched_next
      ‚Ä¢ Back          ‚Üí back_main
    """
    rows = [
        [InlineKeyboardButton(text="‚ûï Add times",       callback_data="sched_add")],
        [InlineKeyboardButton(text="üìÉ List timers",     callback_data="sched_list")],
        [InlineKeyboardButton(text="üïò Remove by time",  callback_data="sched_remove")],
        [InlineKeyboardButton(text="üßπ Clear all",       callback_data="sched_clear")],
        [InlineKeyboardButton(text="üì§ Export CSV",      callback_data="sched_export")],
        [InlineKeyboardButton(text="üì• Import CSV",      callback_data="sched_import")],
        [InlineKeyboardButton(text="üìÖ Next 7 days",     callback_data="sched_next")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è Back",            callback_data="back_main")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


def dow_picker_kb(mask: int) -> InlineKeyboardMarkup:
    """
    –ü–∏–∫–µ—Ä –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏.
      ‚Ä¢ –¢–æ–≥–≥–ª—ã –¥–Ω–µ–π: dow_t:0..6
      ‚Ä¢ –ü—Ä–µ—Å–µ—Ç—ã:     dow_all / dow_wkd / dow_wke
      ‚Ä¢ –û–ö / Cancel: dow_ok / dow_cancel
      ‚Ä¢ Back:        sched_menu
    """
    days = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]
    rows: List[List[InlineKeyboardButton]] = []
    for i, d in enumerate(days):
        picked = bool(mask & (1 << i))
        label = f"{'‚Ä¢ ' if picked else ''}{d}"
        rows.append([InlineKeyboardButton(text=label, callback_data=f"dow_t:{i}")])
    rows.append([InlineKeyboardButton(text="Daily",    callback_data="dow_all")])
    rows.append([InlineKeyboardButton(text="Weekdays", callback_data="dow_wkd")])
    rows.append([InlineKeyboardButton(text="Weekends", callback_data="dow_wke")])
    rows.append([InlineKeyboardButton(text="‚úÖ OK",     callback_data="dow_ok")])
    rows.append([InlineKeyboardButton(text="‚úñÔ∏è Cancel", callback_data="dow_cancel")])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è Back",   callback_data="sched_menu")])
    return InlineKeyboardMarkup(inline_keyboard=rows)
