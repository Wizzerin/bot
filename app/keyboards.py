# app/keyboards.py
# ------------------------------------------------------------
# –í—Å–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–æ—Ç–∞.
# ------------------------------------------------------------

from __future__ import annotations

from typing import Iterable, List
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta

from app.database.models import Job, Account


# =========================
#   –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ò –ù–ê–°–¢–†–û–ô–ö–ò
# =========================

def main_menu_kb() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∏–Ω–ª–∞–π–Ω-–≤–µ—Ä—Å–∏—è)."""
    rows = [
        [InlineKeyboardButton(text="üìù Post now", callback_data="post_now")],
        [InlineKeyboardButton(text="‚è± Schedule", callback_data="sched_menu")],
        [InlineKeyboardButton(text="üîë Accounts", callback_data="tok_accounts")],
        [InlineKeyboardButton(text="‚öôÔ∏è Settings", callback_data="settings_menu")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


def settings_menu_kb() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    rows = [
        [InlineKeyboardButton(text="üîî Notifications", callback_data="notify_menu")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è Help", callback_data="help_show")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è Back", callback_data="back_main")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


# =========================
#   –ê–ö–ö–ê–£–ù–¢–´ –ò –¢–û–ö–ï–ù–´
# =========================

def accounts_menu_kb(accounts: list[Account]) -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–ª–∏ —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É "Set"."""
    rows = []
    for acc in accounts:
        default_marker = " ‚≠êÔ∏è" if acc.is_default else ""
        label = acc.title or getattr(acc, 'threads_username', f"Account {acc.id}")
        rows.append([
            InlineKeyboardButton(text=f"{label}{default_marker}", callback_data=f"acc_view:{acc.id}")
        ])
    
    rows.append([InlineKeyboardButton(text="üîë Set token", callback_data="tok_set")])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è Back", callback_data="back_main")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def account_actions_kb(acc_id: int) -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."""
    rows = [
        [
            InlineKeyboardButton(text="‚úèÔ∏è Rename", callback_data=f"acc_rename:{acc_id}"),
            InlineKeyboardButton(text="üóë Delete", callback_data=f"acc_delete:{acc_id}"),
        ],
        [InlineKeyboardButton(text="‚≠êÔ∏è Set as default", callback_data=f"acc_set_default:{acc_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è Back to Accounts", callback_data="tok_accounts")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


def account_delete_confirm_kb(acc_id: int) -> InlineKeyboardMarkup:
    """(–î–û–ë–ê–í–õ–ï–ù–û) –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞."""
    rows = [
        [InlineKeyboardButton(text="‚úÖ Yes, delete", callback_data=f"acc_delete_confirm:{acc_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è Back", callback_data=f"acc_view:{acc_id}")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


# =========================
#   –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ò –ß–ê–°–û–í–û–ô –ü–û–Ø–°
# =========================

def notify_menu() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    rows = [
        [InlineKeyboardButton(text="üìç Send reports here", callback_data="notify_here")],
        [InlineKeyboardButton(text="üìä Status", callback_data="notify_status")],
        [InlineKeyboardButton(text="üåç Time Zone", callback_data="tz_menu")],
        [InlineKeyboardButton(text="üß™ Test", callback_data="notify_test")],
        [InlineKeyboardButton(text="üîï Off", callback_data="notify_off")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è Back to Settings", callback_data="settings_menu")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


def tz_menu(current_tz: str) -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞."""
    rows = [
        [InlineKeyboardButton(text=f"Current: {current_tz}", callback_data="tz_enter")],
        [
            InlineKeyboardButton(text="Europe/Kyiv", callback_data="tz_set:Europe/Kyiv"),
            InlineKeyboardButton(text="Europe/Berlin", callback_data="tz_set:Europe/Berlin"),
        ],
        [InlineKeyboardButton(text="Enter manually...", callback_data="tz_enter")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è Back to Notifications", callback_data="notify_menu")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


# =========================
#         SCHEDULE
# =========================

def schedule_menu() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ Schedule."""
    rows = [
        [
            InlineKeyboardButton(text="‚ûï Add", callback_data="sched_add"),
            InlineKeyboardButton(text="üìÉ List", callback_data="sched_list"),
        ],
        [
            InlineKeyboardButton(text="üóìÔ∏è Weekly View", callback_data="sched_weekly_view"),
            InlineKeyboardButton(text="üßπ Clear All", callback_data="sched_clear"),
        ],
        [
            InlineKeyboardButton(text="üì§ Export", callback_data="sched_export"),
            InlineKeyboardButton(text="üì• Import", callback_data="sched_import"),
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è Back", callback_data="back_main")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


def dow_picker_kb(mask: int) -> InlineKeyboardMarkup:
    """–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –ø–∏–∫–µ—Ä –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏."""
    days = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]
    
    # –ö–Ω–æ–ø–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –≤ –¥–≤–∞ —Ä—è–¥–∞
    day_buttons = []
    for i, d in enumerate(days):
        label = f"{'‚úÖ ' if (mask >> i) & 1 else ''}{d}"
        day_buttons.append(InlineKeyboardButton(text=label, callback_data=f"dow_t:{i}"))
    
    rows = [day_buttons[:4], day_buttons[4:]] 
    
    # –ö–Ω–æ–ø–∫–∏ –ø—Ä–µ—Å–µ—Ç–æ–≤
    rows.append([
        InlineKeyboardButton(text="Daily", callback_data="dow_all"),
        InlineKeyboardButton(text="Weekdays", callback_data="dow_wkd"),
        InlineKeyboardButton(text="Weekends", callback_data="dow_wke"),
    ])
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    rows.append([
        InlineKeyboardButton(text="‚úÖ OK", callback_data="dow_ok"),
        InlineKeyboardButton(text="‚¨ÖÔ∏è Back", callback_data="sched_menu"),
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=rows)


def weekly_view_kb(days_info: list[tuple[str, str, int]]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."""
    rows = []
    for label, date_str, post_count in days_info:
        text = f"{label} ({post_count} posts)" if post_count > 0 else label
        rows.append([InlineKeyboardButton(text=text, callback_data=f"sched_day:{date_str}")])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è Back to Schedule", callback_data="sched_menu")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def day_view_kb(date_str: str) -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ "–Ω–∞–∑–∞–¥" –∏–∑ –¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è Back to Weekly View", callback_data="sched_weekly_view")]
    ])


def job_list_kb(jobs: list[Job]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á –¥–ª—è –≤—ã–±–æ—Ä–∞."""
    rows = []
    for job in jobs:
        short_text = (job.text or "")[:30]
        if len(job.text or "") > 30: short_text += "..."
        label = f"{job.time_str} - {short_text}"
        rows.append([InlineKeyboardButton(text=label, callback_data=f"sched_job_view:{job.id}")])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è Back to Schedule", callback_data="sched_menu")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def job_actions_kb(job_id: int) -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏."""
    rows = [
        [
            InlineKeyboardButton(text="‚úèÔ∏è Edit Text", callback_data=f"sched_job_edit_text:{job_id}"),
            InlineKeyboardButton(text="üóë Delete", callback_data=f"sched_job_delete:{job_id}")
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è Back to List", callback_data="sched_list")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


def job_delete_confirm_kb(job_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏."""
    rows = [
        [InlineKeyboardButton(text="‚úÖ Yes, delete", callback_data=f"sched_job_delete_confirm:{job_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è Back", callback_data=f"sched_job_view:{job_id}")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)

