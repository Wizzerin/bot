# app/keyboards.py
# ------------------------------------------------------------
# (–ò–ó–ú–ï–ù–ï–ù–ò–ï) –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ 'str' object has no attribute 'strftime' –≤ archive_dates_kb.
# –í—Å–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–æ—Ç–∞.
# ------------------------------------------------------------

from __future__ import annotations

import locale # –î–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç
from typing import Iterable, List, Tuple
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton # –î–æ–±–∞–≤–ª–µ–Ω KeyboardButton
from datetime import datetime, date # –î–æ–±–∞–≤–ª–µ–Ω–æ date

from app.database.models import Job, Account, PublishedPost, Draft # –î–æ–±–∞–≤–ª–µ–Ω Draft

# –ü–æ–ø—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Å—è—Ü–µ–≤
try:
    # –£—Å—Ç–∞–Ω–æ–≤–∏–º en_US, —á—Ç–æ–±—ã –º–µ—Å—è—Ü—ã –±—ã–ª–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
    locale.setlocale(locale.LC_TIME, 'en_US.UTF-8')
except locale.Error:
    try:
        # Fallback –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–∏—Å—Ç–µ–º
        locale.setlocale(locale.LC_TIME, 'en_US')
    except locale.Error:
        print("Warning: Could not set locale to en_US for month names.")
        pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –ª–æ–∫–∞–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞

# =========================
#   –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ò –ù–ê–°–¢–†–û–ô–ö–ò
# =========================

def main_menu_kb() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∏–Ω–ª–∞–π–Ω-–≤–µ—Ä—Å–∏—è)."""
    rows = [
        [InlineKeyboardButton(text="üìù Post now", callback_data="post_now")],
        [InlineKeyboardButton(text="‚è± Schedule", callback_data="sched_menu")],
        [InlineKeyboardButton(text="üìÑ Drafts", callback_data="drafts_menu")], # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ Drafts
        [InlineKeyboardButton(text="üîë Accounts", callback_data="tok_accounts")],
        [InlineKeyboardButton(text="‚öôÔ∏è Settings", callback_data="settings_menu")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


def settings_menu_kb() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    rows = [
        [InlineKeyboardButton(text="üîî Notifications", callback_data="notify_menu")],
        [InlineKeyboardButton(text="üóÑÔ∏è Archive", callback_data="archive_list:0")], # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ Archive
        [InlineKeyboardButton(text="‚ÑπÔ∏è Help", callback_data="help_show")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è Back", callback_data="back_main")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


# =========================
#   –ê–ö–ö–ê–£–ù–¢–´ –ò –¢–û–ö–ï–ù–´
# =========================

def accounts_menu_kb(accounts: list[Account]) -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–ª–∏ —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É "Set"."""
    rows = []
    for acc in accounts:
        default_marker = " ‚≠êÔ∏è" if acc.is_default else ""
        label = acc.title or getattr(acc, 'threads_username', f"Account {acc.id}")
        rows.append([
            InlineKeyboardButton(text=f"{label}{default_marker}", callback_data=f"acc_view:{acc.id}")
        ])

    rows.append([InlineKeyboardButton(text="üîë Set token", callback_data="tok_set")])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è Back", callback_data="back_main")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def account_actions_kb(acc_id: int) -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."""
    rows = [
        [
            InlineKeyboardButton(text="‚úèÔ∏è Rename", callback_data=f"acc_rename:{acc_id}"),
            InlineKeyboardButton(text="üóë Delete", callback_data=f"acc_delete:{acc_id}"),
        ],
        [InlineKeyboardButton(text="‚≠êÔ∏è Set as default", callback_data=f"acc_set_default:{acc_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è Back to Accounts", callback_data="tok_accounts")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


def account_delete_confirm_kb(acc_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞."""
    rows = [
        [InlineKeyboardButton(text="‚úÖ Yes, delete", callback_data=f"acc_delete_confirm:{acc_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è Back", callback_data=f"acc_view:{acc_id}")], # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π acc_id
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)

# =========================
#   –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ò –ß–ê–°–û–í–û–ô –ü–û–Ø–°
# =========================

def notify_menu() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    rows = [
        [InlineKeyboardButton(text="üìç Send reports here", callback_data="notify_here")],
        [InlineKeyboardButton(text="üìä Status", callback_data="notify_status")],
        [InlineKeyboardButton(text="üåç Time Zone", callback_data="tz_menu")], # –°—Å—ã–ª–∫–∞ –Ω–∞ tz_menu
        [InlineKeyboardButton(text="üß™ Test", callback_data="notify_test")],
        [InlineKeyboardButton(text="üîï Off", callback_data="notify_off")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è Back to Settings", callback_data="settings_menu")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)

# --- (–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ê –§–£–ù–ö–¶–ò–Ø tz_menu) ---
def tz_menu(current_tz: str) -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞."""
    rows = [
        [InlineKeyboardButton(text=f"Current: {current_tz}", callback_data="tz_enter")],
        [
            InlineKeyboardButton(text="Europe/Kyiv", callback_data="tz_set:Europe/Kyiv"),
            InlineKeyboardButton(text="Europe/Berlin", callback_data="tz_set:Europe/Berlin"),
        ],
        [InlineKeyboardButton(text="Enter manually...", callback_data="tz_enter")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è Back to Notifications", callback_data="notify_menu")], # –í–æ–∑–≤—Ä–∞—Ç –≤ notify_menu
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)
# ---

# =========================
#         SCHEDULE
# =========================

def schedule_menu() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ Schedule."""
    rows = [
        [
            InlineKeyboardButton(text="‚ûï Add", callback_data="sched_add"),
            InlineKeyboardButton(text="üìÉ List", callback_data="sched_list"),
        ],
        [
            InlineKeyboardButton(text="üóìÔ∏è Weekly View", callback_data="sched_weekly_view"),
            InlineKeyboardButton(text="üßπ Clear All", callback_data="sched_clear"),
        ],
        [
            InlineKeyboardButton(text="üì§ Export", callback_data="sched_export"),
            InlineKeyboardButton(text="üì• Import", callback_data="sched_import"),
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è Back", callback_data="back_main")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


def dow_picker_kb(mask: int) -> InlineKeyboardMarkup:
    """–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –ø–∏–∫–µ—Ä –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏."""
    days = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]

    # –ö–Ω–æ–ø–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –≤ –¥–≤–∞ —Ä—è–¥–∞
    day_buttons = []
    for i, d in enumerate(days):
        label = f"{'‚úÖ ' if (mask >> i) & 1 else ''}{d}"
        day_buttons.append(InlineKeyboardButton(text=label, callback_data=f"dow_t:{i}"))

    rows = [day_buttons[:4], day_buttons[4:]]

    # –ö–Ω–æ–ø–∫–∏ –ø—Ä–µ—Å–µ—Ç–æ–≤
    rows.append([
        InlineKeyboardButton(text="Daily", callback_data="dow_all"),
        InlineKeyboardButton(text="Weekdays", callback_data="dow_wkd"),
        InlineKeyboardButton(text="Weekends", callback_data="dow_wke"),
    ])

    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    rows.append([
        InlineKeyboardButton(text="‚úÖ OK", callback_data="dow_ok"),
        InlineKeyboardButton(text="‚¨ÖÔ∏è Back", callback_data="sched_menu"), # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é Schedule
    ])

    return InlineKeyboardMarkup(inline_keyboard=rows)

def weekly_view_kb(days_info: list[tuple[str, str, int]]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."""
    rows = []
    for label, date_str, post_count in days_info:
        text = f"{label} ({post_count} posts)" if post_count > 0 else label
        rows.append([InlineKeyboardButton(text=text, callback_data=f"sched_day:{date_str}")])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è Back to Schedule", callback_data="sched_menu")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def day_view_kb(date_str: str) -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ "–Ω–∞–∑–∞–¥" –∏–∑ –¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è Back to Weekly View", callback_data="sched_weekly_view")]
    ])

def job_list_kb(jobs: list[Job]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á –¥–ª—è –≤—ã–±–æ—Ä–∞ (—É–ª—É—á—à–µ–Ω–Ω–∞—è)."""
    rows = []
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    dow_map = {0: "Mo", 1: "Tu", 2: "We", 3: "Th", 4: "Fr", 5: "Sa", 6: "Su"}

    for job in jobs:
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        dow_str = ""
        mask = job.dow_mask or 0
        if mask == 127: dow_str = "Daily"
        elif mask == 31: dow_str = "Weekdays"
        elif mask == 96: dow_str = "Weekends"
        else: dow_str = ",".join([dow_map[i] for i in range(7) if (mask >> i) & 1])

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–¥–∏–∞ (–µ—Å–ª–∏ —Å–≤—è–∑—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞)
        media_count = len(job.media) if hasattr(job, 'media') and job.media is not None else 0
        media_icon = f"üñºÔ∏è{media_count}" if media_count > 0 else ""

        # –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        short_text = (job.text or "")[:25]
        if len(job.text or "") > 25: short_text += "..."

        label = f"‚è∞{job.time_str} üóìÔ∏è{dow_str} {media_icon}üìù{short_text}"
        rows.append([InlineKeyboardButton(text=label, callback_data=f"sched_job_view:{job.id}")])

    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è Back to Schedule", callback_data="sched_menu")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def job_actions_kb(job_id: int) -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏."""
    rows = [
        [
            InlineKeyboardButton(text="‚úèÔ∏è Edit Text", callback_data=f"sched_job_edit_text:{job_id}"),
            # TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ Edit Media, Edit Time/Days
            InlineKeyboardButton(text="üóë Delete", callback_data=f"sched_job_delete:{job_id}")
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è Back to List", callback_data="sched_list")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


def job_delete_confirm_kb(job_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏."""
    rows = [
        [InlineKeyboardButton(text="‚úÖ Yes, delete", callback_data=f"sched_job_delete_confirm:{job_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è Back", callback_data=f"sched_job_view:{job_id}")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)

# =========================
#         ARCHIVE
# =========================

def archive_dates_kb(dates_with_counts: List[Tuple[str | date, int]]) -> InlineKeyboardMarkup: # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ str | date
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –≤ –∞—Ä—Ö–∏–≤–µ."""
    rows = []
    for dt_val, count in dates_with_counts:
        # --- (–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï) ---
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ date, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
        dt: date | None = None # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø
        if isinstance(dt_val, str):
            try:
                # date.fromisoformat –æ–∂–∏–¥–∞–µ—Ç 'YYYY-MM-DD'
                dt = date.fromisoformat(dt_val)
            except ValueError:
                print(f"Warning: Could not parse date string '{dt_val}' in archive_dates_kb")
                continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞—Ç—ã
        elif isinstance(dt_val, date):
            dt = dt_val
        else:
             print(f"Warning: Unexpected date type '{type(dt_val)}' in archive_dates_kb")
             continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º

        if dt is None: # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
             continue

        date_str = dt.strftime('%Y-%m-%d')
        # --- –ö–æ–Ω–µ—Ü –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º locale –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, %B - –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
        label = dt.strftime(f'%d %b %Y ({count} posts)') # %b - —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
        rows.append([InlineKeyboardButton(text=label, callback_data=f"archive_date:{date_str}")])

    rows.append([InlineKeyboardButton(text="üì• Import Manual Post", callback_data="archive_import_start")]) # –ö–Ω–æ–ø–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è Back to Settings", callback_data="settings_menu")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def archive_posts_kb(posts: List[PublishedPost], accounts_map: dict, date_str: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ—Å—Ç–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É."""
    rows = []
    for post in posts:
        time_str = post.published_at.strftime('%H:%M')
        acc_title = accounts_map.get(post.account_id, f"id={post.account_id}")
        media_icon = "üñºÔ∏è" if post.has_media else ""
        short_text = (post.text or "")[:30].replace("\n", " ")
        if len(post.text or "") > 30: short_text += "..."
        label = f"{time_str} ({acc_title}) {media_icon} {short_text}"
        rows.append([InlineKeyboardButton(text=label, callback_data=f"archive_post:{post.id}")])

    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è Back to Dates", callback_data="archive_list:0")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def archive_post_detail_kb(date_str: str, post_db_id: int) -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–∞ –≤ –∞—Ä—Ö–∏–≤–µ."""
    rows = [
        [
            InlineKeyboardButton(text="üìä Statistics", callback_data=f"archive_get_stats:{post_db_id}"),
            InlineKeyboardButton(text="üó£Ô∏è View Comments", callback_data=f"archive_view_comments:{post_db_id}")
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è Back to Posts", callback_data=f"archive_date:{date_str}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


def archive_comments_kb(
    comments: list[dict], post_db_id: int, date_str: str,
    current_page: int, per_page: int,
    has_next_page: bool, has_prev_page: bool
) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    rows = []
    for i, comment in enumerate(comments):
        user = comment.get('username', 'unknown')
        text = (comment.get('text', '') or '')[:40].replace('\n', ' ')
        if len(comment.get('text', '')) > 40: text += '...'
        label = f"üë§{user}: \"{text}\""
        comment_id = comment.get('id', '')
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        rows.append([InlineKeyboardButton(text=label, callback_data=f"archive_select_comment:{post_db_id}:{comment_id}")])

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    nav_buttons = []
    if has_prev_page:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è Prev", callback_data=f"archive_comments_page:{post_db_id}:prev"))
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
        nav_buttons.append(InlineKeyboardButton(text=" ", callback_data="noop"))

    nav_buttons.append(InlineKeyboardButton(text=f"- {current_page} -", callback_data="noop")) # –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    if has_next_page:
        nav_buttons.append(InlineKeyboardButton(text="Next ‚û°Ô∏è", callback_data=f"archive_comments_page:{post_db_id}:next"))
    else:
        nav_buttons.append(InlineKeyboardButton(text=" ", callback_data="noop"))

    if nav_buttons:
        rows.append(nav_buttons)

    # –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –∫ –ø–æ—Å—Ç—É
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è Back to Post", callback_data=f"archive_post:{post_db_id}")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def archive_comment_reply_kb(post_db_id: int, comment_id: str) -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."""
    rows = [
        [
            InlineKeyboardButton(text="ü§ñ Generate AI Reply", callback_data=f"archive_generate_reply:{post_db_id}:{comment_id}"),
        ],
        [
            InlineKeyboardButton(text="‚úèÔ∏è Write Manually", callback_data=f"archive_write_reply:{post_db_id}:{comment_id}"),
        ],
        [
            # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å ID –ø–æ—Å—Ç–∞)
            InlineKeyboardButton(text="‚¨ÖÔ∏è Back to Comments", callback_data=f"archive_view_comments:{post_db_id}")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)

def archive_confirm_reply_kb(post_db_id: int, comment_id: str) -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/–æ—Ç–º–µ–Ω—ã AI-–æ—Ç–≤–µ—Ç–∞."""
    rows = [
        [
            InlineKeyboardButton(text="‚úÖ Publish", callback_data=f"archive_publish_reply:{post_db_id}:{comment_id}"),
            InlineKeyboardButton(text="‚úèÔ∏è Edit", callback_data=f"archive_edit_reply:{post_db_id}:{comment_id}"),
        ],
        [
            InlineKeyboardButton(text="üîÑ Regenerate", callback_data=f"archive_generate_reply:{post_db_id}:{comment_id}"), # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            # –û—Ç–º–µ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É –¥–µ–π—Å—Ç–≤–∏—è (Generate/Write)
            InlineKeyboardButton(text="‚ùå Cancel", callback_data=f"archive_select_comment:{post_db_id}:{comment_id}")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)

# --- (–ö–õ–ê–í–ò–ê–¢–£–†–´ –î–õ–Ø –ò–ú–ü–û–†–¢–ê) ---
def archive_import_account_kb(accounts: List[Account]) -> InlineKeyboardMarkup:
    """–í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –ø–æ—Å—Ç–æ–≤."""
    rows = []
    for acc in accounts:
        label = acc.title or f"Account {acc.id}"
        rows.append([InlineKeyboardButton(text=label, callback_data=f"archive_import_acc:{acc.id}")])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è Back to Archive", callback_data="archive_list:0")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def archive_import_list_kb(posts: List[dict]) -> InlineKeyboardMarkup:
    """–°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞."""
    rows = []
    for post in posts:
        ts_str = post.get('timestamp', '')
        dt_str = "Unknown time"
        if ts_str:
            try: dt_str = datetime.fromisoformat(ts_str.replace('Z', '+00:00')).strftime('%d %b %H:%M')
            except: pass # Ignore parsing errors
        short_text = (post.get('text', '') or '')[:40].replace("\n", " ")
        if len(post.get('text', '')) > 40: short_text += "..."
        media_icon = ""
        if post.get('media_type') in ('IMAGE', 'CAROUSEL', 'VIDEO'): media_icon = " üñºÔ∏è" # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ CAROUSEL

        label = f"{dt_str}{media_icon} \"{short_text}\""
        rows.append([InlineKeyboardButton(text=label, callback_data=f"archive_import_select:{post.get('id')}")])

    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è Back to Archive", callback_data="archive_list:0")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

# --- (–ù–û–í–´–ï –ö–õ–ê–í–ò–ê–¢–£–†–´ –î–õ–Ø –ß–ï–†–ù–û–í–ò–ö–û–í) ---
def drafts_menu_kb(drafts: List[Draft]) -> InlineKeyboardMarkup:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –∏ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å'."""
    rows = []
    for draft in drafts:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–¥–∏–∞
        short_text = (draft.text or "No text")[:40].replace("\n", " ")
        if len(draft.text or "") > 40: short_text += "..."
        # (–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï) –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞—Ç—Ä–∏–±—É—Ç media –ø–µ—Ä–µ–¥ –ø–æ–¥—Å—á–µ—Ç–æ–º
        media_count = len(draft.media) if hasattr(draft, 'media') and draft.media is not None else 0
        media_icon = f"üñºÔ∏è{media_count}" if media_count > 0 else ""
        label = f"üìÑ{draft.id}: {media_icon} \"{short_text}\""
        rows.append([InlineKeyboardButton(text=label, callback_data=f"draft_view:{draft.id}")])

    rows.append([InlineKeyboardButton(text="‚ûï Create New Draft", callback_data="draft_create")])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è Back to Main Menu", callback_data="back_main")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def draft_view_kb(draft_id: int) -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞."""
    rows = [
        [
            InlineKeyboardButton(text="‚úèÔ∏è Edit Text", callback_data=f"draft_edit_text:{draft_id}"),
            InlineKeyboardButton(text="üñºÔ∏è Manage Media", callback_data=f"draft_manage_media:{draft_id}"),
        ],
        [
            InlineKeyboardButton(text="‚ú® Suggest Hashtags", callback_data=f"draft_suggest_hashtags:{draft_id}"),
            InlineKeyboardButton(text="üìã Copy for Threads", callback_data=f"draft_copy:{draft_id}"),
        ],
        [
            InlineKeyboardButton(text="üóëÔ∏è Delete Draft", callback_data=f"draft_delete:{draft_id}"),
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è Back to Drafts List", callback_data="drafts_menu"),
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)

def draft_manage_media_kb(draft_id: int, has_media: bool) -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞ –¥–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞."""
    rows = [
        # –ö–Ω–æ–ø–∫–∞ 'Clear' –∞–∫—Ç–∏–≤–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞
        [InlineKeyboardButton(text="‚ôªÔ∏è Clear All Media", callback_data=f"draft_clear_media:{draft_id}") if has_media else InlineKeyboardButton(text=" ", callback_data="noop")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è Back to Draft", callback_data=f"draft_view:{draft_id}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)

def draft_copy_kb(draft_id: int) -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥' –ø–æ—Å–ª–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è Back to Draft", callback_data=f"draft_view:{draft_id}")]
    ])

def draft_delete_confirm_kb(draft_id: int) -> InlineKeyboardMarkup:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞."""
    rows = [
        [InlineKeyboardButton(text="‚úÖ Yes, delete", callback_data=f"draft_delete_confirm:{draft_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è Back", callback_data=f"draft_view:{draft_id}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)

# --- –ö–æ–Ω–µ—Ü –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ ---

# –û–±—â–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
def back_button(callback_data: str) -> InlineKeyboardMarkup:
    """–ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥'."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è Back", callback_data=callback_data)]
    ])

# –ü—É—Å—Ç–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∫–æ–ª–±–µ–∫–æ–≤, –≥–¥–µ –Ω–µ –Ω—É–∂–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
noop_kb = InlineKeyboardMarkup(inline_keyboard=[[]])

