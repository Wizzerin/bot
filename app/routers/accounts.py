# app/routers/accounts.py
# ------------------------------------------------------------
# –ï–î–ò–ù–´–ô —Ä–æ—É—Ç–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –∏ —Ç–æ–∫–µ–Ω–∞–º–∏ Threads.
# ------------------------------------------------------------

import logging
from html import escape

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from sqlalchemy import select, delete, update

from app.database.models import async_session, Account
from app.services.safe_edit import safe_edit
from app.services.threads_client import get_profile as get_threads_profile, ThreadsError
from app.services.token_health import check_and_cache_token_health
from app.keyboards import accounts_menu_kb, account_actions_kb, account_delete_confirm_kb

log = logging.getLogger(__name__)
router = Router()

# (–ò–ó–ú–ï–ù–ï–ù–û) –õ–æ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ—É—Ç–µ—Ä–∞
log.info("Accounts router loaded!")


# ---------- FSMs ----------
class SetTokenFSM(StatesGroup):
    waiting_token = State()

class RenameAccountFSM(StatesGroup):
    waiting_new_name = State()


# ===============================================
#   –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –†–ê–ó–î–ï–õ–ê
# ===============================================

# --- –ù–û–í–´–ô –•–ï–ù–î–õ–ï–† ---
# –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ reply-–∫–Ω–æ–ø–∫—É "üîë Accounts"
# –∏ –∏–º–∏—Ç–∏—Ä—É–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ inline-–∫–Ω–æ–ø–∫–∏ "tok_accounts",
# —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É acc_list_menu.
@router.message(F.text == "üîë Accounts")
async def handle_accounts_text_button(message: Message):
    """
    –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ reply-–∫–Ω–æ–ø–∫—É "üîë Accounts"
    –∏ –∏–º–∏—Ç–∏—Ä—É–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ inline-–∫–Ω–æ–ø–∫–∏ "tok_accounts",
    —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É acc_list_menu.
    """
    
    async def mock_answer(*args, **kwargs):
        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è-–ø—É—Å—Ç—ã—à–∫–∞ –Ω—É–∂–Ω–∞,
        # —Ç.–∫. acc_list_menu –≤—ã–∑—ã–≤–∞–µ—Ç cb.answer()
        pass

    # –°–æ–∑–¥–∞–µ–º "—Ñ–µ–π–∫–æ–≤—ã–π" –æ–±—ä–µ–∫—Ç CallbackQuery,
    # —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –µ–≥–æ –≤ acc_list_menu
    fake_cb = type("FakeCallbackQuery", (object,), {
        "data": "tok_accounts",
        "message": message, # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–Ω–æ–ø–∫–∏
        "from_user": message.from_user,
        "answer": mock_answer # –ü–µ—Ä–µ–¥–∞–µ–º async-–ø—É—Å—Ç—ã—à–∫—É
    })
    
    await acc_list_menu(fake_cb)
# --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –•–ï–ù–î–õ–ï–†–ê ---


@router.callback_query(F.data == "tok_accounts")
async def acc_list_menu(cb: CallbackQuery) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–ª–∏ –º–µ–Ω—é –¥–ª—è –∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–∏—è."""
    user_id = cb.from_user.id
    async with async_session() as session:
        accounts = (await session.execute(
            select(Account).where(Account.tg_user_id == user_id).order_by(Account.id)
        )).scalars().all()

    if not accounts:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –¥–µ–ª–∞–µ–º —ç—Ç–æ. –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.
        await safe_edit(
            cb.message,
            "You have no accounts yet. Press 'üîë Set token' to add one.",
            reply_markup=accounts_menu_kb([]) # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É "Set" –∏ "Back"
        )
        await cb.answer(); return

    await safe_edit(cb.message, "Select an account to manage:", reply_markup=accounts_menu_kb(accounts))
    await cb.answer()


# ===============================================
#   –î–û–ë–ê–í–õ–ï–ù–ò–ï/–ò–ó–ú–ï–ù–ï–ù–ò–ï –¢–û–ö–ï–ù–ê
# ===============================================

@router.callback_query(F.data == "tok_set")
async def tok_enter_token_start(cb: CallbackQuery, state: FSMContext) -> None:
    await safe_edit(cb.message, "Send me your Threads token (starts with 'TH...').\n/cancel to cancel.")
    await state.set_state(SetTokenFSM.waiting_token)
    await cb.answer()


@router.message(Command("set_token"))
async def tok_save_token_cmd(message: Message, state: FSMContext) -> None:
    if not message.text or len(message.text.split()) < 2:
        await message.answer("Usage: <code>/set_token TH...</code>")
        return

    token = message.text.split(maxsplit=1)[1]
    await message.delete()
    await _process_and_save_token(message, state, token)


@router.message(SetTokenFSM.waiting_token)
async def tok_enter_token_msg(message: Message, state: FSMContext) -> None:
    token = (message.text or "").strip()
    if not token.startswith("TH"):
        await message.answer("Token should start with 'TH...'. Try again or /cancel.")
        return

    await message.delete()
    await _process_and_save_token(message, state, token)


async def _process_and_save_token(message: Message, state: FSMContext, token: str) -> None:
    """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞."""
    await state.clear()
    wait_msg = await message.answer("Checking token...")
    
    try:
        profile = await get_threads_profile(token)
        username = profile.get("username", "unknown")
        
        async with async_session() as session:
            new_acc = Account(
                tg_user_id=message.from_user.id,
                access_token=token,
                title=username,
            )
            session.add(new_acc)
            await session.commit()
            
            await check_and_cache_token_health(new_acc.id, notify_on_error=False)

            q = select(Account).where(Account.tg_user_id == message.from_user.id)
            user_accounts = (await session.execute(q)).scalars().all()
            if len(user_accounts) == 1:
                user_accounts[0].is_default = True
                await session.commit()

        await wait_msg.edit_text(f"‚úÖ Token is valid and saved!\nAccount: <b>{username}</b>")

    except ThreadsError as e:
        await wait_msg.edit_text(f"‚ùå Invalid token: {e}")
    except Exception as e:
        log.exception("Error setting token: %s", e)
        await wait_msg.edit_text("‚ùå An unexpected error occurred.")


# ===============================================
#   –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ù–ö–†–ï–¢–ù–´–ú –ê–ö–ö–ê–£–ù–¢–û–ú
# ===============================================

@router.callback_query(F.data.startswith("acc_view:"))
async def acc_view_actions(cb: CallbackQuery) -> None:
    user_id = cb.from_user.id
    try:
        acc_id = int(cb.data.split(":", 1)[1])
    except (ValueError, IndexError):
        await cb.answer("Invalid account ID.", show_alert=True); return

    async with async_session() as session:
        acc = await session.get(Account, acc_id)

    if not acc or acc.tg_user_id != user_id:
        await cb.answer("Account not found.", show_alert=True); return

    wait_msg = await cb.message.answer("Checking token health...")
    is_healthy, reason = await check_and_cache_token_health(acc_id, notify_on_error=False)
    await wait_msg.delete()
    
    status_icon = "‚úÖ" if is_healthy else "‚ùå"
    status_text = "Healthy" if is_healthy else f"Invalid ({reason})"
    default_text = " (default)" if acc.is_default else ""

    text = (
        f"<b>Account:</b> {escape(acc.title or 'N/A')}{default_text}\n"
        f"<b>Status:</b> {status_icon} {status_text}"
    )
    
    await safe_edit(cb.message, text, reply_markup=account_actions_kb(acc_id))
    await cb.answer()


# ---- –£–¥–∞–ª–µ–Ω–∏–µ ----
@router.callback_query(F.data.startswith("acc_delete:"))
async def acc_delete_confirm(cb: CallbackQuery):
    try:
        acc_id = int(cb.data.split(":", 1)[1])
    except (ValueError, IndexError):
        await cb.answer("Invalid account ID.", show_alert=True); return

    await safe_edit(
        cb.message,
        "Are you sure you want to delete this account and all its scheduled posts?",
        reply_markup=account_delete_confirm_kb(acc_id)
    )
    await cb.answer()

@router.callback_query(F.data.startswith("acc_delete_confirm:"))
async def acc_delete_do(cb: CallbackQuery):
    user_id = cb.from_user.id
    try:
        acc_id_to_delete = int(cb.data.split(":", 1)[1])
    except (ValueError, IndexError):
        await cb.answer("Invalid account ID.", show_alert=True); return

    async with async_session() as session:
        await session.execute(
            delete(Account)
            .where(Account.id == acc_id_to_delete, Account.tg_user_id == user_id)
        )
        
        remaining_accounts = (await session.execute(
            select(Account).where(Account.tg_user_id == user_id).order_by(Account.id)
        )).scalars().all()
        
        if remaining_accounts and not any(acc.is_default for acc in remaining_accounts):
            remaining_accounts[0].is_default = True
        
        await session.commit()

    await cb.answer("Account deleted.")
    await acc_list_menu(cb)


# ---- –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ ----
@router.callback_query(F.data.startswith("acc_rename:"))
async def acc_rename_start(cb: CallbackQuery, state: FSMContext):
    try:
        acc_id = int(cb.data.split(":", 1)[1])
    except (ValueError, IndexError):
        await cb.answer("Invalid account ID.", show_alert=True); return
    
    await state.set_state(RenameAccountFSM.waiting_new_name)
    await state.update_data(rename_acc_id=acc_id)
    await safe_edit(cb.message, "Send a new name for this account (e.g., 'Work Account').\n/cancel to abort.")
    await cb.answer()

@router.message(RenameAccountFSM.waiting_new_name)
async def acc_rename_finish(message: Message, state: FSMContext):
    new_name = (message.text or "").strip()
    if not new_name or len(new_name) > 50:
        await message.answer("Name cannot be empty or longer than 50 characters. Try again or /cancel.")
        return

    data = await state.get_data()
    acc_id = data.get("rename_acc_id")

    async with async_session() as session:
        await session.execute(
            update(Account)
            .where(Account.id == acc_id, Account.tg_user_id == message.from_user.id)
            .values(title=new_name)
        )
        await session.commit()
    
    await state.clear()
    await message.answer("‚úÖ Account renamed.")
    
    async def mock_answer(*args, **kwargs): pass

    fake_cb = type("FakeCallbackQuery", (object,), {
        "data": f"acc_view:{acc_id}",
        "message": message, 
        "from_user": message.from_user,
        "answer": mock_answer
    })
    
    await acc_list_menu(fake_cb)


# ---- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é ----
@router.callback_query(F.data.startswith("acc_set_default:"))
async def acc_set_default(cb: CallbackQuery):
    user_id = cb.from_user.id
    try:
        acc_id_to_set = int(cb.data.split(":", 1)[1])
    except (ValueError, IndexError):
        await cb.answer("Invalid account ID.", show_alert=True); return

    async with async_session() as session:
        # –°–Ω–∞—á–∞–ª–∞ —Å–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ "default" —Å–æ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        await session.execute(
            update(Account)
            .where(Account.tg_user_id == user_id)
            .values(is_default=False)
        )
        # –ó–∞—Ç–µ–º —Å—Ç–∞–≤–∏–º "default" –Ω—É–∂–Ω–æ–º—É
        await session.execute(
            update(Account)
            .where(Account.id == acc_id_to_set, Account.tg_user_id == user_id)
            .values(is_default=True)
        )
        await session.commit()

    await cb.answer("Set as default account.")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å "(default)"
    await acc_view_actions(cb)
