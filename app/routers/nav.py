# app/routers/nav.py
# ------------------------------------------------------------
# (–ò–ó–ú–ï–ù–ï–ù–ò–ï) –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ ValidationError –¥–ª—è ReplyKeyboardMarkup.
# (–ò–ó–ú–ï–ù–ï–ù–ò–ï) –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ safe_edit.
# –†–æ—É—Ç–µ—Ä –¥–ª—è –±–∞–∑–æ–≤–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: /start, /menu, Settings.
# ------------------------------------------------------------

from typing import Union # <-- –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ
import logging

from aiogram import Router, F, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton # –î–æ–±–∞–≤–ª–µ–Ω KeyboardButton
from aiogram.fsm.context import FSMContext

from app.keyboards import main_menu_kb, settings_menu_kb # –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ Drafts –∏ Archive
from .drafts import drafts_list_menu
from .archive import archive_list_dates
# (–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï) –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º safe_edit –Ω–∞–ø—Ä—è–º—É—é
from app.services.safe_edit import safe_edit


log = logging.getLogger(__name__)
router = Router()

# (–ò–ó–ú–ï–ù–ï–ù–û) –õ–æ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ—É—Ç–µ—Ä–∞
log.info("Navigation router loaded!")

# --- –ù–∏–∂–Ω—è—è (Reply) –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫–µ—Ç –∫–Ω–æ–ø–æ–∫
main_reply_kb_layout = [
    ["üìù Post now", "‚è± Schedule"],
    ["üìÑ Drafts", "üîë Accounts"],
    ["‚öôÔ∏è Settings"]
]


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    await state.clear()
    # (–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï) –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∑–¥–µ—Å—å
    keyboard_buttons = [
        [KeyboardButton(text=text) for text in row]
        for row in main_reply_kb_layout
    ]
    kb = types.ReplyKeyboardMarkup(keyboard=keyboard_buttons, resize_keyboard=True)
    await message.answer(
        "Welcome! üëã\nI can help you schedule posts or post directly to Threads.",
        reply_markup=kb,
    )
    # –°—Ä–∞–∑—É –ø–æ–∫–∞–∂–µ–º –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é —Ç–æ–∂–µ
    await message.answer("Choose an action:", reply_markup=main_menu_kb())

@router.message(Command("menu"))
async def cmd_menu(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu."""
    await state.clear()
    await message.answer("Main menu:", reply_markup=main_menu_kb())

@router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel (–≥–ª–æ–±–∞–ª—å–Ω—ã–π)."""
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("No active action to cancel.", reply_markup=main_menu_kb())
        return

    log.info("Cancelling state %r for user %d", current_state, message.from_user.id)
    await state.clear()
    await message.answer("Action cancelled.", reply_markup=main_menu_kb())

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ CallbackQuery ---
@router.callback_query(F.data == "back_main")
async def back_to_main_menu(cb: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –¥—Ä—É–≥–∏—Ö —Ä–∞–∑–¥–µ–ª–æ–≤."""
    await state.clear()
    # (–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï) –ò—Å–ø–æ–ª—å–∑—É–µ–º safe_edit –Ω–∞–ø—Ä—è–º—É—é
    await safe_edit(cb.message, "Main menu:", reply_markup=main_menu_kb())
    await cb.answer()

@router.callback_query(F.data == "settings_menu")
async def show_settings_menu(cb: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    await state.clear() # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    # (–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï) –ò—Å–ø–æ–ª—å–∑—É–µ–º safe_edit –Ω–∞–ø—Ä—è–º—É—é
    await safe_edit(cb.message, "Settings:", reply_markup=settings_menu_kb())
    await cb.answer()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ ReplyKeyboard (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã) ---
@router.message(F.text == "‚öôÔ∏è Settings")
async def handle_settings_button(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ 'Settings'."""
    await state.clear()
    await message.answer("Settings:", reply_markup=settings_menu_kb()) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é

# --- (–ù–û–í–û–ï) –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Drafts –∏ Archive ---
@router.message(F.text == "üìÑ Drafts")
@router.callback_query(F.data == "drafts_menu")
async def handle_drafts_button(evt: Union[CallbackQuery, Message], state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É Drafts (—Ç–µ–∫—Å—Ç–æ–≤—É—é –∏ –∏–Ω–ª–∞–π–Ω)."""
    await drafts_list_menu(evt, state) # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ drafts.py

@router.message(F.text == "üóÑÔ∏è Archive") # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ reply –∫–Ω–æ–ø–∫—É
@router.callback_query(F.data == "archive_list:0") # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ inline –∫–Ω–æ–ø–∫—É –≤ settings
async def handle_archive_button(evt: Union[CallbackQuery, Message], state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É Archive (—Ç–µ–∫—Å—Ç–æ–≤—É—é –∏ –∏–Ω–ª–∞–π–Ω)."""
    # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π CallbackQuery, –µ—Å–ª–∏ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if isinstance(evt, Message):
        async def mock_answer(*args, **kwargs): pass
        # (–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï) –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª–∞—Å—Å CallbackQuery
        cb = types.CallbackQuery(id='fake_archive', from_user=evt.from_user, message=evt, chat_instance='fake_archive', data="archive_list:0")
        # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–∫-–º–µ—Ç–æ–¥ answer –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
        cb.answer = mock_answer
    else:
        cb = evt

    await archive_list_dates(cb, state) # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ archive.py

