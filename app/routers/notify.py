# app/routers/notify.py
# ------------------------------------------------------------
# –ú–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.
#  ‚Ä¢ notify_menu       ‚Äî –≤—Ö–æ–¥ –≤ –ø–æ–¥–º–µ–Ω—é
#  ‚Ä¢ notify_here       ‚Äî –ø—Ä–∏–≤—è–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤
#  ‚Ä¢ notify_status     ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ + –∫–æ–ª-–≤–æ —Ç–∞–π–º–µ—Ä–æ–≤
#  ‚Ä¢ notify_test       ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
#  ‚Ä¢ notify_off        ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å –æ—Ç—á—ë—Ç—ã
# ------------------------------------------------------------

from __future__ import annotations

import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery
from sqlalchemy import select

from app.keyboards import notify_menu
from app.database.models import async_session, BotSettings, Job
from app.services.notifications import notify_user  # –Ω–∞—à–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ bind_bot
from app.services.safe_edit import safe_edit        # –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–∏–ª–∏ –º–æ–∂–µ—à—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ)

router = Router()
log = logging.getLogger(__name__)

@router.callback_query(F.data == "notify_menu")
async def notify_menu_open(callback: CallbackQuery) -> None:
    log.info("notify_menu: open by user %s", callback.from_user.id)
    await safe_edit(callback.message, "Scheduler notifications:", reply_markup=notify_menu())
    await callback.answer()

@router.callback_query(F.data == "notify_here")
async def notify_here_cb(callback: CallbackQuery) -> None:
    """–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —á–∞—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    log.info("notify_here: user %s -> chat %s", user_id, chat_id)

    async with async_session() as session:
        st = await session.get(BotSettings, user_id)
        if st is None:
            st = BotSettings(tg_user_id=user_id, notify_chat_id=chat_id)
            session.add(st)
        else:
            st.notify_chat_id = chat_id
        await session.commit()

    await safe_edit(callback.message, f"‚úÖ I will send reports here: <code>{chat_id}</code>", reply_markup=notify_menu())
    await callback.answer()

@router.callback_query(F.data == "notify_status")
async def notify_status_cb(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –∫–æ–ª-–≤–æ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = callback.from_user.id
    log.info("notify_status: user %s", user_id)

    async with async_session() as session:
        st = await session.get(BotSettings, user_id)
        jobs = (await session.execute(
            select(Job).where(Job.tg_user_id == user_id)
        )).scalars().all()

    if st and st.notify_chat_id:
        text = f"üîî Enabled\nChat: <code>{st.notify_chat_id}</code>\nYour active timers: <b>{len(jobs)}</b>"
    else:
        text = f"üîï Disabled\nYour active timers: <b>{len(jobs)}</b>\nEnable via ‚Äúüìç Send reports here‚Äù"

    await safe_edit(callback.message, text, reply_markup=notify_menu())
    await callback.answer()

@router.callback_query(F.data == "notify_test")
async def notify_test_cb(callback: CallbackQuery) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π —á–∞—Ç (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)."""
    user_id = callback.from_user.id
    log.info("notify_test: user %s", user_id)
    await notify_user(user_id, "üß™ Test notification from scheduler (button)")
    await callback.answer("Sent test message if chat is configured.")

@router.callback_query(F.data == "notify_off")
async def notify_off_cb(callback: CallbackQuery) -> None:
    """–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–æ—á–∏—Å—Ç–∏—Ç—å notify_chat_id)."""
    user_id = callback.from_user.id
    log.info("notify_off: user %s", user_id)

    async with async_session() as session:
        st = await session.get(BotSettings, user_id)
        if st:
            st.notify_chat_id = None
            await session.commit()

    await safe_edit(callback.message, "üîï Notifications disabled.", reply_markup=notify_menu())
    await callback.answer()
