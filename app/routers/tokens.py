# app/routers/tokens.py
from __future__ import annotations
import logging
from html import escape

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select, func

from app.database.models import async_session, Account, BotSettings
from app.keyboards import (
    tokens_menu_kb,
    accounts_pick_kb,   # –æ—Å—Ç–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç (–Ω–µ –ª–æ–º–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
    accounts_menu_kb,
    account_actions_kb,
)
from app.services.safe_edit import safe_edit
from app.services.token_health import check_token_for_user, recheck_user_tokens
from app.services.threads_client import ThreadsError, get_profile  # –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞

router = Router(name="tokens")
log = logging.getLogger(__name__)


class SetTokenFSM(StatesGroup):
    waiting_token = State()


@router.message(F.text == "üîë Token")
async def token_menu_from_button(message: Message) -> None:
    await message.answer("Token / Accounts:", reply_markup=tokens_menu_kb())


@router.callback_query(F.data == "token_menu")
async def token_menu_cb(cb: CallbackQuery) -> None:
    await safe_edit(cb.message, "Token / Accounts:", reply_markup=tokens_menu_kb())
    await cb.answer()


async def _create_new_account_for_user(user_id: int) -> Account:
    """
    –°–æ–∑–¥–∞—ë—Ç –ù–û–í–´–ô –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –ø–µ—Ä–µ—Ç–∏—Ä–∞—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ).
    –ü–µ—Ä–≤—ã–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º.
    –í–ê–ñ–ù–û: access_token –∑–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π (NOT NULL –≤ –ë–î).
    (–û–°–¢–ê–í–õ–ï–ù–û –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ ‚Äî –Ω–æ –≤ –Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ set token –º—ã –ù–ï —Å–æ–∑–¥–∞—ë–º —á–µ—Ä–Ω–æ–≤–∏–∫–∏.)
    """
    async with async_session() as session:
        count = (await session.execute(
            select(func.count(Account.id)).where(Account.tg_user_id == user_id)
        )).scalar() or 0
        title = f"account {count + 1}"

        acc = Account(tg_user_id=user_id, title=title, access_token="")  # <-- –Ω–µ None!
        session.add(acc)
        await session.commit()
        await session.refresh(acc)

        st = await session.get(BotSettings, user_id)
        if not st:
            st = BotSettings(tg_user_id=user_id, default_account_id=acc.id)
            session.add(st)
            await session.commit()

        return acc


# -------- Set token --------

@router.callback_query(F.data == "tok_set")
async def tok_set(cb: CallbackQuery, state: FSMContext) -> None:
    """
    FIX: –±–æ–ª—å—à–µ –Ω–µ —Å–æ–∑–¥–∞—ë–º "—á–µ—Ä–Ω–æ–≤–æ–π" –∞–∫–∫–∞—É–Ω—Ç –∑–∞—Ä–∞–Ω–µ–µ.
    –°–Ω–∞—á–∞–ª–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω, –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –µ–≥–æ, –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –ø–∏—à–µ–º –≤ –ë–î.
    –¢–∞–∫ –º—ã –Ω–µ –ø–æ–ª—É—á–∞–µ–º –ø—É—Å—Ç—ã—Ö/–±–∏—Ç—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.
    """
    await state.clear()
    await state.set_state(SetTokenFSM.waiting_token)
    await safe_edit(
        cb.message,
        "Send access token (starts with <code>TH</code>)\n\n/cancel to abort",
    )
    await cb.answer()


# ---- CANCEL –≤–æ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞ (—Ñ–∏–∫—Å) ----

@router.message(SetTokenFSM.waiting_token, Command("cancel"))
@router.message(SetTokenFSM.waiting_token, F.text.lower() == "/cancel")
async def tok_set_cancel(message: Message, state: FSMContext) -> None:
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–µ–º FSM –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ç–æ–∫–µ–Ω–æ–≤."""
    await state.clear()
    await message.answer("‚úñÔ∏è Canceled.", reply_markup=tokens_menu_kb())


@router.callback_query(F.data.startswith("acc_pick:"))
async def tok_account_chosen(cb: CallbackQuery, state: FSMContext) -> None:
    """–ï—Å–ª–∏ –≥–¥–µ-—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞ (–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)."""
    # –í –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ –≤—Å—ë —Ä–∞–≤–Ω–æ –∂–¥—ë–º —Ç–æ–∫–µ–Ω –∏ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –ü–û—Å–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏.
    await state.set_state(SetTokenFSM.waiting_token)
    await safe_edit(
        cb.message,
        "Send access token (starts with <code>TH</code>)\n\n/cancel to abort",
    )
    await cb.answer()


@router.message(SetTokenFSM.waiting_token)
async def tok_save_token(message: Message, state: FSMContext) -> None:
    """
    –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞:
      1) –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É —Ç–æ–∫–µ–Ω–∞.
      2) –í–∞–ª–∏–¥–∏—Ä—É–µ–º –µ—ë —á–µ—Ä–µ–∑ Threads (check_token_for_user(..., access_token=...)).
      3) –ï—Å–ª–∏ –≤–∞–ª–∏–¥–Ω–æ ‚Äî –°–û–ó–î–ê–Å–ú –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç —Å —ç—Ç–∏–º —Ç–æ–∫–µ–Ω–æ–º –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã—Å—Ç–∞–≤–ª—è–µ–º default.
      4) –ï—Å–ª–∏ –Ω–µ –≤–∞–ª–∏–¥–Ω–æ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ–∑–¥–∞—ë–º.
    """
    token = (message.text or "").strip()
    user_id = message.from_user.id

    # –º—è–≥–∫–∞—è –ø–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    if not token or not token.startswith("TH") or len(token) < 10:
        await message.answer("Looks like a wrong token. Try again or /cancel.")
        return

    # --- –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —É Threads ---
    try:
        prof = await get_profile(token)  # –≤–µ—Ä–Ω—ë—Ç dict —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è –ª–∏–±–æ –∫–∏–Ω–µ—Ç ThreadsError
    except ThreadsError as e:
        await message.answer("Looks like a wrong token. Try again or /cancel.")
        return
    except Exception as e:
        await message.answer("Temporary error while validating token. Try again a bit later or /cancel.")
        log.exception("token validate error: %s", e)
        return
    title = None
    if isinstance(prof, dict):
        title = prof.get("username") or prof.get("id")
    title = title or "account"

    # --- —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç —Ç–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å ---
    async with async_session() as session:
        # –°—á–∏—Ç–∞–µ–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–ª—è —á–∏—Ç–∞–µ–º–æ–≥–æ title, –µ—Å–ª–∏ username –Ω–µ –ø—Ä–∏—à—ë–ª
        if title == "account":
            count = (await session.execute(
                select(func.count(Account.id)).where(Account.tg_user_id == user_id)
            )).scalar() or 0
            title = f"account {count + 1}"

        acc = Account(tg_user_id=user_id, title=title, access_token=token)
        session.add(acc)
        await session.flush()  # –ø–æ–ª—É—á–∏—Ç—å acc.id

        # –µ—Å–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –µ—â—ë –Ω–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω ‚Äî –≤—ã—Å—Ç–∞–≤–∏–º –Ω–∞ —ç—Ç–æ—Ç
        st = await session.get(BotSettings, user_id)
        if not st:
            st = BotSettings(tg_user_id=user_id, default_account_id=acc.id)
            session.add(st)
        elif not st.default_account_id:
            st.default_account_id = acc.id

        await session.commit()

    await state.clear()
    await message.answer(
        f"‚úÖ Token saved for <b>{escape(title)}</b>.",
        reply_markup=tokens_menu_kb(),
    )


# -------- Check / Recheck --------

@router.callback_query(F.data == "tok_check")
async def tok_check(entry) -> None:
    msg = entry.message if hasattr(entry, "message") else entry
    user_id = msg.chat.id
    status, info = await check_token_for_user(user_id)
    if status == "ok":
        await msg.answer("‚úÖ Token is valid.", reply_markup=tokens_menu_kb())
    else:
        await msg.answer(f"‚ùå Token error: {info or 'unknown'}", reply_markup=tokens_menu_kb())
    if hasattr(entry, "answer"):
        await entry.answer()


@router.callback_query(F.data == "tok_recheck_all")
async def tok_recheck_all(entry) -> None:
    msg = entry.message if hasattr(entry, "message") else entry
    user_id = msg.chat.id
    summary = await recheck_user_tokens(user_id)
    lines = [f"Checked: {summary.get('total', 0)} ‚Äî ok: {summary.get('ok', 0)}, error: {summary.get('error', 0)}"]
    for acc_id, title, status, err in summary.get("details", []):
        line = f"‚Ä¢ {title} (id={acc_id}): {status}"
        if err and status != "ok":
            line += f" ‚Äî {err}"
        lines.append(line)
    await msg.answer("\n".join(lines), reply_markup=tokens_menu_kb())
    if hasattr(entry, "answer"):
        await entry.answer()


# -------- Accounts (–ø—Ä–æ—Å–º–æ—Ç—Ä) --------

@router.callback_query(F.data == "accounts_menu")
async def tok_accounts_menu(cb: CallbackQuery) -> None:
    await safe_edit(cb.message, "Accounts:", reply_markup=accounts_menu_kb())
    await cb.answer()


@router.callback_query(F.data == "accounts_list")
async def tok_accounts_list(cb: CallbackQuery) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π ‚≠ê default.
    (–ù–µ –º–µ–Ω—è–µ–º –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏; —Å—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –∑–≤—ë–∑–¥–æ—á–∫—É.)
    """
    user_id = cb.from_user.id
    async with async_session() as session:
        accs = (await session.execute(
            select(Account).where(Account.tg_user_id == user_id).order_by(Account.id)
        )).scalars().all()
        st = await session.get(BotSettings, user_id)

    if not accs:
        await safe_edit(cb.message, "No accounts yet. Press <b>Set token</b> to add one.",
                        reply_markup=tokens_menu_kb())
        await cb.answer()
        return

    default_id = st.default_account_id if st else None
    rows = []
    for a in accs:
        title = a.title or f"account {a.id}"
        star = "‚≠ê " if default_id and a.id == default_id else ""
        rows.append([InlineKeyboardButton(text=f"{star}{title}", callback_data=f"acc_setdef:{a.id}")])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è Back", callback_data="token_menu")])
    kb = InlineKeyboardMarkup(inline_keyboard=rows)

    await safe_edit(cb.message, "Choose an account:", reply_markup=kb)
    await cb.answer()
