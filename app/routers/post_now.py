# app/routers/post_now.py
# ------------------------------------------------------------
# üìù Post now
# –ü–æ—Ç–æ–∫:
#   1) /start ‚Üí –∫–Ω–æ–ø–∫–∞ "üìù Post now" –∏–ª–∏ callback "post_now"
#   2) –ü—Ä–æ—Å–∏–º —Ç–µ–∫—Å—Ç ‚Üí "Send the post text (or /cancel)"
#   3) –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ–∫–∏–Ω—É—Ç—å –¥–æ 10 —Ñ–æ—Ç–æ (–æ–±—ã—á–Ω—ã–µ photo-—Å–æ–æ–±—â–µ–Ω–∏—è)
#      –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é-—Å—á—ë—Ç—á–∏–∫ –∏ –∫–Ω–æ–ø–∫–∏:
#        ‚Ä¢ ‚úÖ Publish    ‚Äî –ø—É–±–ª–∏–∫—É–µ—Ç
#        ‚Ä¢ ‚ôªÔ∏è Clear      ‚Äî –æ—á–∏—â–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
#        ‚Ä¢ ‚Ü©Ô∏è Cancel     ‚Äî –æ—Ç–º–µ–Ω–∞
#   4) –ü—É–±–ª–∏–∫—É–µ–º —á–µ—Ä–µ–∑ publish_auto(text, access_token, image_urls)
#      image_urls —Å—Ç—Ä–æ–∏–º —á–µ—Ä–µ–∑ get_file_public_url(file_id)
# –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
#   ‚Ä¢ –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –ø—Ä–∏–ª–æ–∂–µ–Ω—ã/–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å URL ‚Äî —É–π–¥—ë—Ç —á–∏—Å—Ç–æ —Ç–µ–∫—Å—Ç.
#   ‚Ä¢ –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ >1, –ø—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å BotSettings.default_account_id,
#     –∏–Ω–∞—á–µ ‚Äî –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞.
# ------------------------------------------------------------

from __future__ import annotations

from typing import List, Optional
import logging
from html import escape

from aiogram import Router, F
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from sqlalchemy import select

from app.database.models import async_session, Account, BotSettings
from app.services.safe_edit import safe_edit
from app.services.tg_io import get_file_public_url
from app.services.threads_client import publish_auto, ThreadsError

log = logging.getLogger(__name__)
router = Router()


# ---------------------- FSM ---------------------- #

class PostNowFSM(StatesGroup):
    choosing_account = State()   # –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è >1 –∞–∫–∫–∞—É–Ω—Ç–∞
    waiting_text     = State()   # –∂–¥—ë–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
    waiting_media    = State()   # —Å–æ–±–∏—Ä–∞–µ–º —Ñ–æ—Ç–æ –∏ –∂–¥—ë–º Publish


# -------------------- –í–•–û–î ----------------------- #

@router.message(F.text == "üìù Post now")
@router.callback_query(F.data == "post_now")
async def post_now_start(evt, state: FSMContext):
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: –µ—Å–ª–∏ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç ‚Äî —Å—Ä–∞–∑—É –ø—Ä–æ—Å–∏–º —Ç–µ–∫—Å—Ç,
    –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ ‚Äî –¥–∞—ë–º –≤—ã–±–æ—Ä.
    """
    if isinstance(evt, Message):
        user_id = evt.from_user.id
        target_msg = evt
        answer = evt.answer
    else:
        user_id = evt.from_user.id
        target_msg = evt.message
        answer = evt.answer

    async with async_session() as session:
        accounts = (await session.execute(
            select(Account).where(Account.tg_user_id == user_id).order_by(Account.id)
        )).scalars().all()

        if not accounts:
            await safe_edit(
                target_msg,
                "You have no accounts yet.\nAdd a token first: <code>Token ‚Üí üîë Set token</code> or <code>/set_token TH...</code>",
            )
            if isinstance(evt, CallbackQuery):
                await answer()
            return

        # –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if len(accounts) == 1:
            await state.update_data(account_id=accounts[0].id, images=[])
            await state.set_state(PostNowFSM.waiting_text)
            await safe_edit(target_msg, "Send the post text (or /cancel).")
            if isinstance(evt, CallbackQuery):
                await answer()
            return

        # –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ ‚Äî —Å–º–æ—Ç—Ä–∏–º –¥–µ—Ñ–æ–ª—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        st = await session.get(BotSettings, user_id)
        if st and st.default_account_id:
            await state.update_data(account_id=st.default_account_id, images=[])
            await state.set_state(PostNowFSM.waiting_text)
            await safe_edit(target_msg, "Send the post text (or /cancel).")
            if isinstance(evt, CallbackQuery):
                await answer()
            return

        # –∏–Ω–∞—á–µ ‚Äî –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
        await state.set_state(PostNowFSM.choosing_account)
        rows = [
            [InlineKeyboardButton(text=f"{a.title or 'untitled'} (id={a.id})", callback_data=f"post_acc:{a.id}")]
            for a in accounts
        ]
        rows.append([InlineKeyboardButton(text="‚Ü©Ô∏è Cancel", callback_data="post_cancel")])
        kb = InlineKeyboardMarkup(inline_keyboard=rows)
        await safe_edit(target_msg, "Choose an account for this post:", reply_markup=kb)
        if isinstance(evt, CallbackQuery):
            await answer()


@router.callback_query(PostNowFSM.choosing_account, F.data.startswith("post_acc:"))
async def post_now_account_picked(cb: CallbackQuery, state: FSMContext):
    try:
        acc_id = int(cb.data.split(":", 1)[1])
    except Exception:
        await cb.answer("Invalid account.", show_alert=True)
        return

    await state.update_data(account_id=acc_id, images=[])
    await state.set_state(PostNowFSM.waiting_text)
    await safe_edit(cb.message, "Send the post text (or /cancel).")
    await cb.answer()


@router.callback_query(PostNowFSM.choosing_account, F.data == "post_cancel")
async def post_now_cancel_from_choose(cb: CallbackQuery, state: FSMContext):
    await state.clear()
    await safe_edit(cb.message, "Cancelled.")
    await cb.answer()


# ---------------- –°–ë–û–† –¢–ï–ö–°–¢–ê ------------------- #

@router.message(PostNowFSM.waiting_text, F.text.as_("text"))
async def post_now_got_text(message: Message, state: FSMContext, text: str):
    text = (text or "").strip()
    if not text or text.lower() == "/cancel":
        await state.clear()
        await message.answer("Cancelled.")
        return

    await state.update_data(text=text, images=[])  # –æ—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–∫ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ Publish", callback_data="post_publish"),
            InlineKeyboardButton(text="‚ôªÔ∏è Clear images", callback_data="post_clear"),
        ],
        [InlineKeyboardButton(text="‚Ü©Ô∏è Cancel", callback_data="post_cancel")],
    ])
    await message.answer(
        "Now send up to 10 photos (as separate messages),\n"
        "or press <b>Publish</b> to post without images.",
        reply_markup=kb
    )
    await state.set_state(PostNowFSM.waiting_media)


# -------------- –°–ë–û–† –§–û–¢–û ---------------------- #

@router.message(PostNowFSM.waiting_media, F.photo)
async def post_now_collect_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    images: List[str] = data.get("images", [])

    # –±–µ—Ä—ë–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    largest = max(message.photo, key=lambda p: p.file_size or 0)
    file_id = largest.file_id

    if len(images) >= 10:
        await message.answer("You already attached 10 photos (max). Use <b>Clear images</b> to reset.")
        return

    images.append(file_id)
    await state.update_data(images=images)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ Publish", callback_data="post_publish"),
            InlineKeyboardButton(text="‚ôªÔ∏è Clear images", callback_data="post_clear"),
        ],
        [InlineKeyboardButton(text="‚Ü©Ô∏è Cancel", callback_data="post_cancel")],
    ])
    await message.answer(f"‚úÖ Added photo ({len(images)}/10).", reply_markup=kb)


# -------------- –ö–ù–û–ü–ö–ò: Publish / Clear / Cancel ----------- #

@router.callback_query(PostNowFSM.waiting_media, F.data == "post_clear")
async def post_now_clear(cb: CallbackQuery, state: FSMContext):
    await state.update_data(images=[])
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ Publish", callback_data="post_publish"),
            InlineKeyboardButton(text="‚ôªÔ∏è Clear images", callback_data="post_clear"),
        ],
        [InlineKeyboardButton(text="‚Ü©Ô∏è Cancel", callback_data="post_cancel")],
    ])
    await safe_edit(cb.message, "Images cleared. You can send new ones, or press Publish.", reply_markup=kb)
    await cb.answer()


@router.callback_query(PostNowFSM.waiting_media, F.data == "post_cancel")
async def post_now_cancel(cb: CallbackQuery, state: FSMContext):
    await state.clear()
    await safe_edit(cb.message, "Cancelled.")
    await cb.answer()


@router.callback_query(PostNowFSM.waiting_media, F.data == "post_publish")
async def post_now_publish(cb: CallbackQuery, state: FSMContext):
    user_id = cb.from_user.id
    payload = await state.get_data()
    text: str = payload.get("text", "") or ""
    account_id: Optional[int] = payload.get("account_id")
    file_ids: List[str] = payload.get("images", []) or []

    # 1) –ü—Ä–æ–≤–µ—Ä–∏–º –∞–∫–∫–∞—É–Ω—Ç
    async with async_session() as session:
        if not account_id:
            # fallback: –≤–∑—è—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∏–ª–∏ –ø–µ—Ä–≤—ã–π
            st = await session.get(BotSettings, user_id)
            if st and st.default_account_id:
                account_id = st.default_account_id
            else:
                first = (await session.execute(
                    select(Account).where(Account.tg_user_id == user_id).order_by(Account.id)
                )).scalars().first()
                account_id = first.id if first else None

        if not account_id:
            await safe_edit(cb.message, "No account selected. Add a token first.")
            await cb.answer()
            await state.clear()
            return

        acc = await session.get(Account, account_id)
        if not acc or not acc.access_token:
            await safe_edit(cb.message, "Account has no token. Set token and try again.")
            await cb.answer()
            await state.clear()
            return

    # 2) –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º file_id ‚Üí –ø—É–±–ª–∏—á–Ω—ã–µ URL (–º–æ–≥—É—Ç –Ω–µ –ø–æ–ª—É—á–∏—Ç—å—Å—è ‚Äî —Ç–æ–≥–¥–∞ –ø—É–±–ª–∏–∫—É–µ–º —Ç–µ–∫—Å—Ç)
    image_urls: List[str] = []
    for fid in file_ids:
        try:
            url = await get_file_public_url(fid)
            if url:
                image_urls.append(url)
        except Exception as e:
            log.warning("post_now: failed to build public url for %s: %s", fid, e)

    # 3) –ü—É–±–ª–∏–∫–∞—Ü–∏—è ‚Äî —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ publish_auto (–Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —É—Ö–æ–¥–∏—Ç –∫—Ä–∏–≤–æ–π media_type)
    try:
        post_id = await publish_auto(text=text, access_token=acc.access_token, image_urls=image_urls)
        await safe_edit(
            cb.message,
            "‚úÖ Published\n"
            f"üßæ {escape(text[:100])}{'‚Ä¶' if len(text) > 100 else ''}\n"
            f"üñºÔ∏è images: {len(image_urls)}\n"
            f"üÜî {escape(str(post_id))}"
        )
        await state.clear()
    except ThreadsError as e:
        await safe_edit(cb.message, f"‚ùå Publish error: {escape(str(e))}")
    except Exception as e:
        log.exception("post_now: unexpected error: %s", e)
        await safe_edit(cb.message, f"‚ùå Unexpected error: {escape(str(e))}")
    finally:
        await cb.answer()
