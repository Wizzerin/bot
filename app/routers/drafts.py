# app/routers/drafts.py
# ------------------------------------------------------------
# (–ò–ó–ú–ï–ù–ï–ù–ò–ï) –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ RuntimeError: This method is not mounted... (—Å–Ω–æ–≤–∞)
# –†–æ—É—Ç–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞–º–∏.
# ------------------------------------------------------------

import logging
from html import escape
from datetime import datetime
from typing import List, Optional, Union # –î–æ–±–∞–≤–ª–µ–Ω Union

from aiogram import Router, F, types
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, delete, update, desc, func # –î–æ–±–∞–≤–ª–µ–Ω func
from sqlalchemy.orm import selectinload


from app.database.models import async_session, Draft, DraftMedia
from app.services.safe_edit import safe_edit
from app.services.ai_assistant import suggest_hashtags
from app.keyboards import (
    drafts_menu_kb, draft_view_kb, draft_manage_media_kb,
    draft_copy_kb, draft_delete_confirm_kb, main_menu_kb, back_button
)

log = logging.getLogger(__name__)
router = Router()

# ---------------------- FSM ---------------------- #

class DraftFSM(StatesGroup):
    waiting_text = State()
    viewing = State() # –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    editing_text = State()
    managing_media = State()
    adding_media = State()


# -------------------- –°–ü–ò–°–û–ö –ß–ï–†–ù–û–í–ò–ö–û–í ----------------------- #

async def drafts_list_menu(evt: Union[CallbackQuery, Message], state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤."""
    await state.clear()
    user_id = evt.from_user.id

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    target_message: Message # –û–±—ä—è–≤–ª—è–µ–º —Ç–∏–ø
    is_callback = isinstance(evt, CallbackQuery) # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∑–∞—Ä–∞–Ω–µ–µ

    if is_callback:
        target_message = evt.message
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±–µ–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ *–Ω–µ* –≤–æ–∑–≤—Ä–∞—Ç –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        # –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞
        if not evt.data.startswith("draft_delete_confirm") \
           and not evt.data.startswith("draft_view:") \
           and not evt.data.startswith("draft_save_media:"):
             await evt.answer()
    else: # –ï—Å–ª–∏ —ç—Ç–æ Message
        target_message = evt

    async with async_session() as session:
        drafts = (await session.execute(
            select(Draft)
            .where(Draft.tg_user_id == user_id)
            .order_by(desc(Draft.id)) # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é ID (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
            .limit(20) # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            .options(selectinload(Draft.media))
        )).scalars().all()

    text = "üìÑ **Drafts**\n\nSelect a draft to view/edit or create a new one:"
    if not drafts:
        text = "üìÑ **Drafts**\n\n_You have no drafts yet._"

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º target_message
    await safe_edit(target_message, text, reply_markup=drafts_menu_kb(drafts))


# -------------------- –°–û–ó–î–ê–ù–ò–ï –ß–ï–†–ù–û–í–ò–ö–ê --------------------- #

@router.callback_query(F.data == "draft_create")
async def draft_create_start(cb: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞, –ø—Ä–æ—Å–∏—Ç —Ç–µ–∫—Å—Ç."""
    await state.set_state(DraftFSM.waiting_text)
    await safe_edit(cb.message, "‚úèÔ∏è Send the text for your new draft.\n\n/cancel to abort.")
    await cb.answer()

@router.message(DraftFSM.waiting_text)
async def draft_create_got_text(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –º–µ–¥–∏–∞."""
    text = message.text
    if not text or text.lower() == '/cancel':
        await state.clear()
        await message.answer("Cancelled creation.", reply_markup=main_menu_kb())
        return

    user_id = message.from_user.id
    async with async_session() as session:
        # –°–æ–∑–¥–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –≤ –±–∞–∑–µ
        new_draft = Draft(tg_user_id=user_id, text=text)
        session.add(new_draft)
        await session.commit()
        await session.refresh(new_draft) # –ü–æ–ª—É—á–∞–µ–º ID
        draft_id = new_draft.id

    await state.set_state(DraftFSM.adding_media)
    await state.update_data(draft_id=draft_id, media_files=[]) # –•—Ä–∞–Ω–∏–º file_id —Ñ–æ—Ç–æ
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ Done Adding Media", callback_data=f"draft_save_media:{draft_id}")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è Cancel Draft", callback_data=f"draft_delete_confirm:{draft_id}")] # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —É–¥–∞–ª–∏—Ç—å, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª
    ])
    await message.answer(
        f"‚úÖ Draft text saved (ID: {draft_id}).\n"
        f"Now send up to 10 photos (as separate messages).\n"
        f"Press 'Done' when finished or to skip adding media.",
        reply_markup=kb
    )

# -------------------- –ü–†–û–°–ú–û–¢–† –ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï ----------------- #

@router.callback_query(F.data.startswith("draft_view:"))
async def draft_view(cb: CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫ –∏ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π."""
    try:
        draft_id = int(cb.data.split(":", 1)[1])
    except (ValueError, IndexError):
        # --- (–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï) –î–æ–±–∞–≤–ª—è–µ–º await –ø–µ—Ä–µ–¥ cb.answer() ---
        await cb.answer("Invalid draft ID.", show_alert=True); return
        # ---

    await state.clear() # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    user_id = cb.from_user.id

    async with async_session() as session:
        draft = await session.get(Draft, draft_id, options=[selectinload(Draft.media)])
        if not draft or draft.tg_user_id != user_id:
            # --- (–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï) –î–æ–±–∞–≤–ª—è–µ–º await –ø–µ—Ä–µ–¥ cb.answer() ---
            await cb.answer("Draft not found.", show_alert=True)
            # ---
            # –ü–æ–ø—Ä–æ–±—É–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É
            fake_evt = types.CallbackQuery(id='fake_notfound', from_user=cb.from_user, message=cb.message, chat_instance='fake_notfound', data="drafts_menu")
            await drafts_list_menu(fake_evt, state)
            return

        media_count = len(draft.media)
        text = draft.text or "(No text)"
        hashtags = draft.suggested_hashtags or ""

    display_text = (
        f"üìÑ **Draft #{draft_id}**\n\n"
        f"üìù **Text:**\n{escape(text)}\n\n"
        f"üñºÔ∏è **Media Attached:** {media_count}/10"
    )
    if hashtags:
        display_text += f"\n\n‚ú® **Suggested Hashtags:**\n{escape(hashtags)}"

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞–ª–∏
    await state.set_state(DraftFSM.viewing)
    await state.update_data(current_draft_id=draft_id)

    await safe_edit(cb.message, display_text, reply_markup=draft_view_kb(draft_id))
    # --- (–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï) –£–¥–∞–ª—è–µ–º cb.answer(), —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —á–µ—Ä–µ–∑ fake_cb ---
    # await cb.answer() # <--- –≠–¢–ê –°–¢–†–û–ö–ê –£–î–ê–õ–ï–ù–ê
    # ---


@router.callback_query(DraftFSM.viewing, F.data.startswith("draft_edit_text:"))
async def draft_edit_text_start(cb: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞."""
    await state.set_state(DraftFSM.editing_text)
    # draft_id —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ state.update_data –∏–∑ draft_view
    await safe_edit(cb.message, "‚úèÔ∏è Send the new text for this draft.\n\n/cancel to keep current text.")
    await cb.answer()

@router.message(DraftFSM.editing_text)
async def draft_edit_text_finish(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç."""
    new_text = message.text
    fsm_data = await state.get_data()
    draft_id = fsm_data.get("current_draft_id")

    if not new_text or new_text.lower() == '/cancel':
        await message.answer("Edit cancelled.")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —á–µ—Ä–Ω–æ–≤–∏–∫–∞
        if draft_id:
            # --- (–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï) –ò—Å–ø–æ–ª—å–∑—É–µ–º message –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞ ---
            fake_cb = types.CallbackQuery(id='fake_cancel_edit', from_user=message.from_user, message=message, chat_instance='fake_cancel_edit', data=f"draft_view:{draft_id}")
            # ---
            await draft_view(fake_cb, state) # –ü–µ—Ä–µ–¥–∞–µ–º state
        else:
            await state.clear()
        return

    if not draft_id:
        await message.answer("Error: Could not find draft ID. Cancelling edit.")
        await state.clear()
        # –ü–æ–ø—Ä–æ–±—É–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É
        fake_evt = types.CallbackQuery(id='fake_no_id', from_user=message.from_user, message=message, chat_instance='fake_no_id', data="drafts_menu")
        await drafts_list_menu(fake_evt, state)
        return

    async with async_session() as session:
        await session.execute(
            update(Draft)
            .where(Draft.id == draft_id, Draft.tg_user_id == message.from_user.id)
            .values(text=new_text)
        )
        await session.commit()

    await message.answer("‚úÖ Text updated.")
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —á–µ—Ä–Ω–æ–≤–∏–∫–∞
    # --- (–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï) –ò—Å–ø–æ–ª—å–∑—É–µ–º message –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞ ---
    fake_cb = types.CallbackQuery(id='fake_edit_done', from_user=message.from_user, message=message, chat_instance='fake_edit_done', data=f"draft_view:{draft_id}")
    # ---
    await draft_view(fake_cb, state) # –ü–µ—Ä–µ–¥–∞–µ–º state


# -------------------- –£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ï–î–ò–ê ---------------------- #

@router.callback_query(DraftFSM.viewing, F.data.startswith("draft_manage_media:"))
async def draft_manage_media_start(cb: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞."""
    fsm_data = await state.get_data()
    draft_id = fsm_data.get("current_draft_id")
    if not draft_id:
        await cb.answer("Error: Draft context lost.", show_alert=True); return

    user_id = cb.from_user.id
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–¥–∏–∞
        media_count_result = await session.execute(
            select(func.count(DraftMedia.id)) # –ò—Å–ø–æ–ª—å–∑—É–µ–º func –∏–∑ sqlalchemy
            .where(DraftMedia.draft_id == draft_id)
        )
        media_count = media_count_result.scalar_one_or_none() or 0

    await state.set_state(DraftFSM.managing_media)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_ids –≤ state –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è/–¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    # (–•–æ—Ç—è –ø—Ä–æ—â–µ –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∏—Ö –∑–∞–Ω–æ–≤–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)

    text = (
        f"üñºÔ∏è **Manage Media for Draft #{draft_id}**\n\n"
        f"Currently attached: {media_count}/10\n\n"
        f"Send photos to add them (up to 10 total).\n"
        f"Use buttons below to clear existing media or go back."
    )
    await safe_edit(cb.message, text, reply_markup=draft_manage_media_kb(draft_id, has_media=media_count > 0))
    await cb.answer()


@router.message(DraftFSM.managing_media, F.photo)
async def draft_manage_media_add(message: Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –≤ —Ä–µ–∂–∏–º–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞."""
    fsm_data = await state.get_data()
    draft_id = fsm_data.get("current_draft_id")
    if not draft_id:
        await message.answer("Error: Draft context lost. Please go back and try again.")
        return

    user_id = message.from_user.id
    largest_photo = max(message.photo, key=lambda p: p.file_size or 0)
    file_id = largest_photo.file_id

    async with async_session() as session:
        # –°—á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–¥–∏–∞
        media_count_result = await session.execute(
            select(func.count(DraftMedia.id)) # –ò—Å–ø–æ–ª—å–∑—É–µ–º func –∏–∑ sqlalchemy
            .where(DraftMedia.draft_id == draft_id)
        )
        media_count = media_count_result.scalar_one_or_none() or 0

        if media_count >= 10:
            await message.answer("Maximum 10 media files reached. Use 'Clear All Media' first.")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –º–µ–¥–∏–∞
        new_media = DraftMedia(draft_id=draft_id, tg_file_id=file_id)
        session.add(new_media)
        await session.commit()
        new_media_count = media_count + 1

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å—á–µ—Ç—á–∏–∫–æ–º
    text = (
        f"üñºÔ∏è **Manage Media for Draft #{draft_id}**\n\n"
        f"‚úÖ Added photo ({new_media_count}/10)\n\n"
        f"Send more photos or use buttons below."
    )
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º message.reply_to_message, –µ—Å–ª–∏ —Ö–æ—Ç–∏–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –∞ –Ω–µ —Å–ª–∞—Ç—å –Ω–æ–≤–æ–µ
    # –ù–æ —Ç–∞–∫ –∫–∞–∫ –º—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º message_id –±–æ—Ç–∞, –ø—Ä–æ—â–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ
    # safe_edit –æ–±–Ω–æ–≤–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ —ç—Ç–æ–º –¥–∏–∞–ª–æ–≥–µ (–µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –æ—Ç –∫–æ–ª–±–µ–∫–∞)
    # –ù–∞–π–¥–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ - —ç—Ç–æ —Å–ª–æ–∂–Ω–æ. –ü—Ä–æ—â–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ.
    await message.answer(text, reply_markup=draft_manage_media_kb(draft_id, has_media=True))


# –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω—É–∂–µ–Ω –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–≤–∞—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫
@router.message(DraftFSM.adding_media, F.photo)
async def draft_create_add_photo(message: Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞."""
    fsm_data = await state.get_data()
    draft_id = fsm_data.get("draft_id")
    media_files: list = fsm_data.get("media_files", [])
    if not draft_id:
        await message.answer("Error: Draft creation context lost. Please start over.")
        await state.clear()
        return

    largest_photo = max(message.photo, key=lambda p: p.file_size or 0)
    file_id = largest_photo.file_id

    if len(media_files) >= 10:
        await message.answer("Maximum 10 media files reached.")
        return

    media_files.append(file_id)
    await state.update_data(media_files=media_files)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ Done Adding Media", callback_data=f"draft_save_media:{draft_id}")], # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        [InlineKeyboardButton(text="‚Ü©Ô∏è Cancel Draft", callback_data=f"draft_delete_confirm:{draft_id}")]
    ])
    await message.answer(f"‚úÖ Added photo ({len(media_files)}/10). Press 'Done' when finished.", reply_markup=kb)

@router.callback_query(DraftFSM.adding_media, F.data.startswith("draft_save_media:"))
async def draft_create_save_media(cb: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –º–µ–¥–∏–∞ –≤ –±–∞–∑—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É."""
    fsm_data = await state.get_data()
    draft_id = fsm_data.get("draft_id")
    media_files: list = fsm_data.get("media_files", [])

    if not draft_id:
        await cb.answer("Error: Draft context lost.", show_alert=True)
        await state.clear()
        return

    async with async_session() as session:
        for file_id in media_files:
            new_media = DraftMedia(draft_id=draft_id, tg_file_id=file_id)
            session.add(new_media)
        await session.commit()

    await cb.answer("Media saved.")
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ draft_view, –ø–µ—Ä–µ–¥–∞–µ–º draft_id
    fake_cb = types.CallbackQuery(id='fake_save_media', from_user=cb.from_user, message=cb.message, chat_instance='fake_save_media', data=f"draft_view:{draft_id}")
    await draft_view(fake_cb, state) # –ü–µ—Ä–µ–¥–∞–µ–º state


@router.callback_query(DraftFSM.managing_media, F.data.startswith("draft_clear_media:"))
async def draft_manage_media_clear(cb: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –º–µ–¥–∏–∞ –∏–∑ —á–µ—Ä–Ω–æ–≤–∏–∫–∞."""
    fsm_data = await state.get_data()
    draft_id = fsm_data.get("current_draft_id")
    if not draft_id:
        await cb.answer("Error: Draft context lost.", show_alert=True); return

    user_id = cb.from_user.id
    async with async_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–µ—Ä–Ω–æ–≤–∏–∫ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –º–µ–¥–∏–∞
        draft = await session.get(Draft, draft_id)
        if not draft or draft.tg_user_id != user_id:
            await cb.answer("Draft not found.", show_alert=True)
            return
        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–µ–¥–∏–∞
        await session.execute(
            delete(DraftMedia).where(DraftMedia.draft_id == draft_id)
        )
        await session.commit()

    await cb.answer("All media cleared.")
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞ (–∫–Ω–æ–ø–∫–∞ Clear —Å—Ç–∞–Ω–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π)
    text = (
        f"üñºÔ∏è **Manage Media for Draft #{draft_id}**\n\n"
        f"Currently attached: 0/10\n\n"
        f"Send photos to add them (up to 10 total)."
    )
    await safe_edit(cb.message, text, reply_markup=draft_manage_media_kb(draft_id, has_media=False))

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö—ç—à—Ç–µ–≥–æ–≤ ---
@router.callback_query(DraftFSM.viewing, F.data.startswith("draft_suggest_hashtags:"))
async def draft_suggest_hashtags_handler(cb: CallbackQuery, state: FSMContext): # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ö—ç—à—Ç–µ–≥–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–∞."""
    fsm_data = await state.get_data()
    draft_id = fsm_data.get("current_draft_id")
    if not draft_id:
        await cb.answer("Error: Draft context lost.", show_alert=True); return

    user_id = cb.from_user.id
    async with async_session() as session:
        draft_text = (await session.execute(
            select(Draft.text).where(Draft.id == draft_id, Draft.tg_user_id == user_id)
        )).scalar_one_or_none()

    if not draft_text:
        await cb.answer("Draft text is empty, cannot suggest hashtags.", show_alert=True)
        return

    await cb.answer("‚ú® Generating hashtags with AI...")
    suggested_tags_text = await suggest_hashtags(draft_text) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–≥–∏ –≤ –±–∞–∑—É
    async with async_session() as session:
         await session.execute(
             update(Draft)
             .where(Draft.id == draft_id)
             .values(suggested_hashtags=suggested_tags_text)
         )
         await session.commit()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º —á–µ—Ä–Ω–æ–≤–∏–∫–∞, –¥–æ–±–∞–≤–ª—è—è —Ç–µ–≥–∏
    # –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ —Å–Ω–æ–≤–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
    async with async_session() as session:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º selectinload –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        draft = await session.get(Draft, draft_id, options=[selectinload(Draft.media)])
        if not draft: # –ú–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
             await cb.answer("Error retrieving draft after saving hashtags.", show_alert=True)
             return
        media_count = len(draft.media)
        text = draft.text or "(No text)"
        hashtags = draft.suggested_hashtags or "" # –¢–µ–ø–µ—Ä—å –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å

    display_text = (
        f"üìÑ **Draft #{draft_id}**\n\n"
        f"üìù **Text:**\n{escape(text)}\n\n"
        f"üñºÔ∏è **Media Attached:** {media_count}/10"
    )
    if hashtags:
        display_text += f"\n\n‚ú® **Suggested Hashtags:**\n{escape(hashtags)}"

    await safe_edit(cb.message, display_text, reply_markup=draft_view_kb(draft_id))
    # await cb.answer() # –û—Ç–≤–µ—Ç —É–∂–µ –±—ã–ª ("Generating...")


# --- –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –£–¥–∞–ª–µ–Ω–∏–µ ---
@router.callback_query(DraftFSM.viewing, F.data.startswith("draft_copy:"))
async def draft_copy_for_threads(cb: CallbackQuery, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∏ —Ö—ç—à—Ç–µ–≥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è."""
    fsm_data = await state.get_data()
    draft_id = fsm_data.get("current_draft_id")
    if not draft_id:
        await cb.answer("Error: Draft context lost.", show_alert=True); return

    user_id = cb.from_user.id
    async with async_session() as session:
        draft = await session.get(Draft, draft_id)
        if not draft or draft.tg_user_id != user_id:
            await cb.answer("Draft not found.", show_alert=True); return
        text = draft.text or ""
        hashtags = draft.suggested_hashtags or ""

    copy_text = text
    if hashtags:
        copy_text += "\n\n" + hashtags # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à—Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –µ–≥–æ –±—ã–ª–æ –ª–µ–≥–∫–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
    if copy_text:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è –±–ª–æ–∫–∞ –∫–æ–¥–∞ <pre><code>...</code></pre>
        await cb.message.answer(
            f"üëá Copy the text below and paste it into Threads:\n\n"
            f"<pre><code>{escape(copy_text)}</code></pre>\n",
            parse_mode="HTML",
            reply_markup=draft_copy_kb(draft_id) # –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥
        )
        await cb.answer("Text prepared for copying.")
    else:
        await cb.answer("Draft is empty.", show_alert=True)


@router.callback_query(F.data.startswith("draft_delete:"))
async def draft_delete_confirm_start(cb: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞."""
    try:
        draft_id = int(cb.data.split(":", 1)[1])
    except (ValueError, IndexError):
        await cb.answer("Invalid draft ID.", show_alert=True); return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, —Ö–æ—Ç—è –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∏ –≤ –∫–Ω–æ–ø–∫–µ
    await state.update_data(delete_draft_id=draft_id)

    await safe_edit(cb.message, f"üóëÔ∏è Are you sure you want to delete Draft #{draft_id}?",
                    reply_markup=draft_delete_confirm_kb(draft_id))
    await cb.answer()


@router.callback_query(F.data.startswith("draft_delete_confirm:"))
async def draft_delete_confirm_finish(cb: CallbackQuery, state: FSMContext):
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫."""
    try:
        draft_id = int(cb.data.split(":", 1)[1])
    except (ValueError, IndexError):
        await cb.answer("Invalid draft ID.", show_alert=True); return

    user_id = cb.from_user.id
    async with async_session() as session:
        # –£–¥–∞–ª—è–µ–º —Å–∞–º —á–µ—Ä–Ω–æ–≤–∏–∫ (—Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–µ–¥–∏–∞ —É–¥–∞–ª—è—Ç—Å—è –∫–∞—Å–∫–∞–¥–Ω–æ –±–ª–∞–≥–æ–¥–∞—Ä—è –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤ models.py)
        result = await session.execute(
            delete(Draft).where(Draft.id == draft_id, Draft.tg_user_id == user_id)
        )
        await session.commit()

    if result.rowcount > 0:
        await cb.answer("Draft deleted.")
    else:
        await cb.answer("Draft not found or already deleted.", show_alert=True)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        await state.clear()
        fake_evt = types.CallbackQuery(id='fake_delete_done', from_user=cb.from_user, message=cb.message, chat_instance='fake_delete_done', data="drafts_menu")
        await drafts_list_menu(fake_evt, state)
        return # –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –ø—ã—Ç–∞—Ç—å—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è—è –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ
    await state.clear()
    user_id = cb.from_user.id
    async with async_session() as session:
        drafts = (await session.execute(
            select(Draft)
            .where(Draft.tg_user_id == user_id)
            .order_by(desc(Draft.id))
            .limit(20)
            .options(selectinload(Draft.media))
        )).scalars().all()
    text = "üìÑ **Drafts**\n\nSelect a draft to view/edit or create a new one:"
    if not drafts:
        text = "üìÑ **Drafts**\n\n_You have no drafts yet._"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ
    try:
         await cb.message.answer(text, reply_markup=drafts_menu_kb(drafts))
         # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –ø–æ–ª—É—á–∏—Ç—Å—è
         await cb.message.delete()
    except Exception as e:
         log.warning("Could not delete confirmation message or send new list after draft deletion: %s", e)


# –í–æ–∑–≤—Ä–∞—Ç –∏–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —á–µ—Ä–Ω–æ–≤–∏–∫–∞
@router.callback_query(DraftFSM.managing_media, F.data.startswith("draft_view:"))
async def back_from_manage_media_to_view(cb: CallbackQuery, state: FSMContext):
     await draft_view(cb, state)

# –í–æ–∑–≤—Ä–∞—Ç –∏–∑ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —á–µ—Ä–Ω–æ–≤–∏–∫–∞
@router.callback_query(F.data.startswith("draft_view:"), ~StateFilter(DraftFSM.viewing))
async def back_to_draft_view_generic(cb: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É 'Back to Draft' –∏–∑ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, Copy)."""
    await draft_view(cb, state)

# –ö–Ω–æ–ø–∫–∞ 'Back to Drafts List' –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
@router.callback_query(DraftFSM.viewing, F.data == "drafts_menu")
async def back_to_drafts_list(cb: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."""
    await drafts_list_menu(cb, state)

